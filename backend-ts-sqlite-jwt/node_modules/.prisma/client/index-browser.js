
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarcaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TipoCambioScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  valor: 'valor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TipoMovimientoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  afectaStock: 'afectaStock',
  esEntrada: 'esEntrada',
  descripcion: 'descripcion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventarioScalarFieldEnum = {
  id: 'id',
  numeroParte: 'numeroParte',
  marcaId: 'marcaId',
  nombre: 'nombre',
  descripcion: 'descripcion',
  stockActual: 'stockActual',
  costoPromedioCordoba: 'costoPromedioCordoba',
  precioVentaPromedioCordoba: 'precioVentaPromedioCordoba',
  precioVentaSugeridoCordoba: 'precioVentaSugeridoCordoba',
  codigoSustituto: 'codigoSustituto',
  marcaSustitutoId: 'marcaSustitutoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MovimientoInventarioScalarFieldEnum = {
  id: 'id',
  inventarioId: 'inventarioId',
  tipoMovimientoId: 'tipoMovimientoId',
  fecha: 'fecha',
  cantidad: 'cantidad',
  costoUnitarioCordoba: 'costoUnitarioCordoba',
  precioVentaUnitarioCordoba: 'precioVentaUnitarioCordoba',
  tipoCambioValor: 'tipoCambioValor',
  observacion: 'observacion',
  usuario: 'usuario',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompraScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  proveedor: 'proveedor',
  numeroFactura: 'numeroFactura',
  totalCordoba: 'totalCordoba',
  tipoCambioValor: 'tipoCambioValor',
  usuario: 'usuario',
  observacion: 'observacion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetalleCompraScalarFieldEnum = {
  id: 'id',
  compraId: 'compraId',
  inventarioId: 'inventarioId',
  cantidad: 'cantidad',
  costoUnitarioCordoba: 'costoUnitarioCordoba',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VentaScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  cliente: 'cliente',
  numeroFactura: 'numeroFactura',
  totalCordoba: 'totalCordoba',
  tipoCambioValor: 'tipoCambioValor',
  usuario: 'usuario',
  observacion: 'observacion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetalleVentaScalarFieldEnum = {
  id: 'id',
  ventaId: 'ventaId',
  inventarioId: 'inventarioId',
  cantidad: 'cantidad',
  precioUnitarioCordoba: 'precioUnitarioCordoba',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DevolucionVentaScalarFieldEnum = {
  id: 'id',
  ventaId: 'ventaId',
  fecha: 'fecha',
  cliente: 'cliente',
  motivo: 'motivo',
  usuario: 'usuario',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetalleDevolucionVentaScalarFieldEnum = {
  id: 'id',
  devolucionVentaId: 'devolucionVentaId',
  inventarioId: 'inventarioId',
  cantidad: 'cantidad',
  precioUnitarioCordoba: 'precioUnitarioCordoba',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DevolucionCompraScalarFieldEnum = {
  id: 'id',
  compraId: 'compraId',
  fecha: 'fecha',
  proveedor: 'proveedor',
  motivo: 'motivo',
  usuario: 'usuario',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetalleDevolucionCompraScalarFieldEnum = {
  id: 'id',
  devolucionCompraId: 'devolucionCompraId',
  inventarioId: 'inventarioId',
  cantidad: 'cantidad',
  costoUnitarioCordoba: 'costoUnitarioCordoba',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CambioScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  cliente: 'cliente',
  motivo: 'motivo',
  usuario: 'usuario',
  observacion: 'observacion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetalleCambioScalarFieldEnum = {
  id: 'id',
  cambioId: 'cambioId',
  inventarioSalidaId: 'inventarioSalidaId',
  inventarioEntradaId: 'inventarioEntradaId',
  cantidadSalida: 'cantidadSalida',
  cantidadEntrada: 'cantidadEntrada',
  precioUnitarioCordoba: 'precioUnitarioCordoba',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Marca: 'Marca',
  TipoCambio: 'TipoCambio',
  TipoMovimiento: 'TipoMovimiento',
  Inventario: 'Inventario',
  MovimientoInventario: 'MovimientoInventario',
  Compra: 'Compra',
  DetalleCompra: 'DetalleCompra',
  Venta: 'Venta',
  DetalleVenta: 'DetalleVenta',
  DevolucionVenta: 'DevolucionVenta',
  DetalleDevolucionVenta: 'DetalleDevolucionVenta',
  DevolucionCompra: 'DevolucionCompra',
  DetalleDevolucionCompra: 'DetalleDevolucionCompra',
  Cambio: 'Cambio',
  DetalleCambio: 'DetalleCambio'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
